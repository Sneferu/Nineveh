Guide for fish shell

To run a command:
    Same as normal on any standard shell
    Spaces: Use the familiar '\ ' model
    Chains: Semicolons allow the chaining of commands
    Wildcards:
        * behaves as a normal wildcard in this directory
        ** also recursively checks directories as long as final path fits
    Pipes: Use |, <, >, >2 as usual
    True/False: Use true and false commands, same as bash
    For Loop:
        for val in $<list>
            Command on $val
        end
    Command substitution:
        Use parentheses rather than ` type substitution
        Substitution does not work inside strings, so prepend/append strings directly to expansion
        echo (pwd)"/work" -> /this/that/work
    Combiners:
        &&, ||, and ! behave as expected
        and, or, not are lower precedence, allowing multiple &&'s before a single and
    Conditionals:
        if <condition>
            <do this>
        else if <condition>
            <do this>
        else
            <do that>
        end
    Test:
        To look for variable equality, use
            test $<val1> <operator> <val2>
        Where the operator is one of
            =, -gt, -lt
    Switch:
        switch (<command>)
        case <val1>
            <do this>
        case <val2> <val3>
            <do that>
        end
        Note that case statements do not fall through, and can accept multiple components or wildcards
    Loops:
        while <cond>
            <do this>
        end
        for <item> in <list>
            <do something with> $<item>
        end
        To create a list of numbers, range inclusive 1 through x
            seq <x>

To get help:
    man : Gets help in general
    man <cmd> : Gets help for a given command

Autocompletion:
    Tab: Works with commands and directories (cycle through options with tab as well)
    ->: Accept an autocompleted command
    Alt ->: Accept one word of an autocompleted command

Variables:
    Set: set <varname> <value>
    Get: $<varname>
    Export: set -x <varname> <value>
    Delete: set -e <varname>
    Set Universal:
        set -U <varname> <value>
        These values are saved accross sessions
    Note that spaces separate values into lists. Use single quotes to avoid this behavior.
    Also note that passing a variable with single quotes includes those quotes
        i.e. set varname 'Space var'; mkdir $varname makes a directory called 'Space var' not two directories
    Exit Status: Contained in the $status variable
    Lists:
        Split string into array: string split $<var>
        Get length: count $<list>
        Append: set <var> $<var> <val>
        Get: $<var>[<val>]
        Get range: $<var>[<val1>..<val2>]
        Note that array indices start at 1 and end with -1
        Ranges are inclusive on both sides
    Strings:
        Variables within strings are expanded
    Special Variables:
        Exit status stored in
            $status
        Strings stored as lists include
            $PATH, $CDPATH, $MANPATH
    Inner products:
        Lists together (i.e $l1$l2) are expanded as outer products of their components
        Same is true of lists directly bordering strings (i.e $l1"string" is "$l1[1]string $l1[2]string ...")

Functions:
    To define a function
        function <name>
            <subs>
        end
    Arguments are passed as the array $argv
    List all functions:
        functions
    See a function definition:
        functions <name>
    Autoloading:
        When fish encounters a command, it looks for ~/.config/fish/functions/<command>.fish
        If it find it, it runs the <command> function inside

To customize prompt:
    Use the function fish_prompt
    function fish_prompt
        set_color purple
        date "+%m/%d/%y"
        set_color FF0
        echo (pwd) '>'
        set_color normal
    end

Startup:
    Fish starts up by executing the code in ~/.config/fish/config.fish



